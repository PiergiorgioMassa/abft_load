initialize() {
	if (exists("slimgui")){ //seed and K need to be set through the shell script 
		defineConstant("seed_burnin", 1);
		defineConstant("seed_bottleneck", 1);
		defineConstant("K", 100000);
		defineConstant("start_gen", 300000);
		defineConstant("bn", 0.30);
	}
	setSeed(seed_bottleneck);
	defineConstant("Kbn", asInteger(K * bn));
	
	//genomic parameters
	defineConstant("g", 3); //total gene number
	defineConstant("geneLength", 30000); //gene length
	defineConstant("geneSelCoeff", c(-0.001,-0.01,-0.1)); //three selection coefficients are tested here
	defineConstant("genomeLength", 9e4); //resulting model genome length
	initializeMutationRate(1e-8);
	initializeMutationType(0, 0.0, "f", 0.0).convertToSubstitution=T; //neutral mutations
	defineConstant("m1_domCoeff", 0.5/(1-7071.07*(-0.001))); //dominance coefficients of deleterious mutations are set according to the hs relationship (Henn et al 2016, Kyriazis et al 2020)
	defineConstant("m1_hetFitEff", 1.0-(0.001*m1_domCoeff));
	initializeMutationType(1, m1_domCoeff, "f", -0.001).convertToSubstitution=T; //deleterious mutations "m1" s=-0.001
	initializeGenomicElementType(1, c(1,0), c(2.31,1.0));
	defineConstant("m2_domCoeff", 0.5/(1-7071.07*(-0.01)));
	defineConstant("m2_hetFitEff", 1.0-(0.01*m2_domCoeff));
	initializeMutationType(2, m2_domCoeff, "f", -0.01).convertToSubstitution=T; //deleterious mutations "m2" s=-0.01
	initializeGenomicElementType(2, c(2,0), c(2.31,1.0));
	defineConstant("m3_domCoeff", 0.5/(1-7071.07*(-0.1)));
	defineConstant("m3_hetFitEff", 1.0-(0.1*m3_domCoeff));
	initializeMutationType(3, m3_domCoeff, "f", -0.1).convertToSubstitution=T; //deleterious mutations "m3" s=-0.1
	initializeGenomicElementType(3, c(3,0), c(2.31,1.0));
	counter=1;
	while (counter<=g){
		initializeGenomicElement(1, ((counter-1)*geneLength)+(counter-1), (counter*geneLength)+(counter-2));
		counter=counter+1;
		initializeGenomicElement(2, ((counter-1)*geneLength)+(counter-1), (counter*geneLength)+(counter-2));
		counter=counter+1;
		initializeGenomicElement(3, ((counter-1)*geneLength)+(counter-1), (counter*geneLength)+(counter-2));
		counter=counter+1;
	}
	
	rates=c(rep(c(1e-7,0.5), g-1),1e-7); //recombination rates is set at 1e-8 within genes and at 0.5 between genes in order to remove linkage effect between genes
	ends=NULL;
	for (i in 1:(g-1)){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=c(ends,(g*geneLength)+(g-2));
	initializeRecombinationRate(rates, ends);
}


300000 late(){
	sim.readFromPopulationFile("TunaLoad_mod1_K" + K + "_seed" + seed_burnin + "_gen" + start_gen + "_burnin.oF");
}


300001 early(){
	muts = unique(p1.haplosomes.mutations);
	muts_count = p1.haplosomes.mutationCountsInHaplosomes(muts);
	muts = muts[muts_count>10];
	target_muts=c();
	target_muts_TAG=c();
	counter=0;
	mut_types=c(m0, m1, m2, m3);
	for (EFF in c("MODIFIER", "LOW", "MODERATE", "HIGH")){
		muts_eff = muts[muts.mutationType == mut_types[counter]];
		target_mut = sample(muts_eff, 3);
		for (MUT in target_mut){
			out_file = "mod1_output/K" + K + "_seed" + seed_burnin + "_bn" + bn + "_" + EFF + "_rep" + seed_bottleneck + "_id" + MUT.id + ".csv";
			MUT.setValue("out_file", out_file);
			target_muts_TAG = c(target_muts_TAG, out_file);
			writeFile(out_file, "##START", F);
			writeFile(out_file, "##" + EFF, T);
			writeFile(out_file, "##s=" + MUT.selectionCoeff, T);
			writeFile(out_file, "##ID=" + MUT.id, T);
			writeFile(out_file, "##freq=" + p1.haplosomes.mutationFrequenciesInHaplosomes(MUT), T);
			writeFile(out_file, "CYCLE,POPSIZE,HOM_REF,HET,HOM_DER,DER", T);
			print(out_file + " --> STARTED");
		}
		target_muts = c(target_muts, target_mut);
		counter = counter + 1;
	}
	defineConstant("target_muts_id", target_muts.id);
	defineConstant("target_muts_tag", target_muts_TAG);
	print("TRACKED MUTS:");
	print(target_muts_id);
}


300001:300490 late(){
	muts=unique(p1.haplosomes.mutations);
	counter=0;
	for (MUT_ID in target_muts_id){
		target_mut = muts[muts.id == MUT_ID];
		target_mut_tag = target_muts_tag[counter];
		if (size(target_mut)>0) {
			ind_count=NULL;
			for (IND in p1.individuals){
				ind_count=c(ind_count, IND.haplosomes.mutationCountsInHaplosomes(target_mut));
			}
			hom_anc = size(ind_count[ind_count==0]) / p1.individualCount;
			het = size(ind_count[ind_count==1]) / p1.individualCount;
			hom_der = size(ind_count[ind_count==2]) / p1.individualCount;
			der = p1.haplosomes.mutationFrequenciesInHaplosomes(target_mut);		
		} else {
			hom_anc=0.0;
			het=0.0;
			hom_der=0.0;
			der=0.0;
		}
		writeFile(target_mut_tag, sim.cycle + "," + p1.individualCount + "," + hom_anc + "," + het + "," + hom_der + "," + der, T);
		counter = counter + 1;
	}
}


300491:300500 late(){
	p1.setSubpopulationSize(Kbn);
	muts=unique(p1.haplosomes.mutations);
	counter=0;
	for (MUT_ID in target_muts_id){
		target_mut = muts[muts.id == MUT_ID];
		target_mut_tag = target_muts_tag[counter];
		if (size(target_mut)>0) {
			ind_count=NULL;
			for (IND in p1.individuals){
				ind_count=c(ind_count, IND.haplosomes.mutationCountsInHaplosomes(target_mut));
			}
			hom_anc = size(ind_count[ind_count==0]) / p1.individualCount;
			het = size(ind_count[ind_count==1]) / p1.individualCount;
			hom_der = size(ind_count[ind_count==2]) / p1.individualCount;
			der = p1.haplosomes.mutationFrequenciesInHaplosomes(target_mut);		
		} else {
			hom_anc=0.0;
			het=0.0;
			hom_der=0.0;
			der=0.0;
		}
		writeFile(target_mut_tag, sim.cycle + "," + p1.individualCount + "," + hom_anc + "," + het + "," + hom_der + "," + der, T);
		counter = counter + 1;
	}
}


300501:300510 late(){
	p1.setSubpopulationSize(K);
	muts=unique(p1.haplosomes.mutations);
	counter=0;
	for (MUT_ID in target_muts_id){
		target_mut = muts[muts.id == MUT_ID];
		target_mut_tag = target_muts_tag[counter];
		if (size(target_mut)>0) {
			ind_count=NULL;
			for (IND in p1.individuals){
				ind_count=c(ind_count, IND.haplosomes.mutationCountsInHaplosomes(target_mut));
			}
			hom_anc = size(ind_count[ind_count==0]) / p1.individualCount;
			het = size(ind_count[ind_count==1]) / p1.individualCount;
			hom_der = size(ind_count[ind_count==2]) / p1.individualCount;
			der = p1.haplosomes.mutationFrequenciesInHaplosomes(target_mut);		
		} else {
			hom_anc=0.0;
			het=0.0;
			hom_der=0.0;
			der=0.0;
		}
		writeFile(target_mut_tag, sim.cycle + "," + p1.individualCount + "," + hom_anc + "," + het + "," + hom_der + "," + der, T);
		counter = counter + 1;
	}
	if (sim.cycle==300510){
		print("##DONE");
		sim.simulationFinished();
	}
}